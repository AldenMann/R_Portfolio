Summary(case101)
summary(score[Intrinsic])
score(Treatment=="Intrinsic")
case101 <-read.csv(C:\Users\15033\OneDrive\Desktop\R2\case101,header=T)
case101 <-read.csv("C:\Users\15033\OneDrive\Desktop\R2\case101.csv",header=T)
case101 <-read.csv(C:\Users\15033\OneDrive\Desktop\R2\case101.csv,header=T)
case101<-read.csv(C:\Users\15033\OneDrive\Desktop\R2\case101.csv,header=T)
case101 <-read.csv(C:\Users\15033\OneDrive\Desktop\R2\case101.csv,header=TRUE)
case101 <-read.csv("C:\Users\15033\OneDrive\Desktop\R2\case101.csv",header=T)
Summary(Score[Treatment=="Intrinsic"])
summary (Score[Treatment==”Intrinsic”])
case101 <-read.csv("C:/Users/15033/OneDrive/Desktop/R2/case101.csv",header=T)
summary(Score[Treatment=="Intrinsic"])
read.csv(file = case0101.csv,header = # Thu Apr 23 13:13:08 2020 ------------------------------
Is()
Is
Is ()
summary$Score
ls(2)
summary (Score[Treatment==”Intrinsic”])
summary (Score[Treatment==”Extrinsic”])
attach(case0101)
case0101$Score
view(case0101)
summary(Score)
case0101 <-read.csv("C:\Users\")
q()
library(readr)
case0101 <- read_csv("case0101.csv")
View(case0101)
ls ()
case0101
case0101$Score
case0101$Treatment
attach(case0101)
ls(2)
summary(Score[Treament=="Intrinsic"])
summary(Score(Treatment=="Intrinsic"))
summary(Score)
sd(Treatment)
summary(Score[Treatment=="Intrinsic"])
summary(Score[Treatment=="Extrinsic"])
hist(split(Score,Treatment))
hist(Score(Treatment=="Intrinsic"))
hist(Score[Treatment=="Intrinsic"])
hist(Score[Treatment=="Intrinsic"], breaks = seq(4,6,8,10,12,14,16,18,20,22,24,26,28,30)
hist(Score[Treatment=="Intrinsic"], breaks = seq(4,6,8,10,12,14,16,18,20,22,24,26,28,30))
hist(Score[Treatment=="Intrinsic"], breaks = seq(4,6,8,10,12,14,16,18,20,22,24,26,28,30)
2
hist(Score[Treatment=="Intrinsic"], breaks = seq(4,6,8,10,12,14,16,18,20,22,24,26,28,30)
hist(Score[Treatment=="Intrinsic"]), breaks = seq(4,6,8,10,12,14,16,18,20,22,24,26,28,30)
hist(Score[Treatment=="Intrinsic"]), breaks = seq(4,6,8,10,12,14,16,18,20,22,24,26,28,30)
hist(Score[Treatment=="Intrinsic"], breaks = seq(4,6,8,10,12,14,16,18,20,22,24,26,28,30)
hist(Score[Treatment=="Intrinsic"], breaks = seq(4-6,8,10,12,14,16,18,20,22,24,26,28,30)
hist(Score[Treatment=="Extrinsic"], breaks = seq(4,6,8,10,12,14,16,18,20,22,24,26,28,30)
hist(Score[Treatment=="Extrinsic"])
hist
hist(Score[Treatment=="Extrinsic"])
boxplot(Score[Treatment=="Extrinsic"])
boxplot(Score[Treatment=="Extrinsic"]),ylab="Extrinsic"
boxplot(Score[Treatment=="Extrinsic"]),main="Extrinsic"
boxplot(Score[Treatment=="Extrinsic"]),main=Extrinsic
boxplot(Score[Treatment=="Intrinsic"])
boxplot(split(Score,Treatment),main="Scores intrinsic vs extrinsic")
View(case0101)
install.packages('datasets')
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
1-norm(2,0,1)
1-pnorm(2,0,1)
help(pnorm)
x=seq(-4,4,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="1",col="red",lwd=2)
plot(x,y,type="l",col="red",lwd=2)
help("plot")
plot(x,y,type="l",col="red",lwd=2)
y2=dnorm(x,mean=0,sd=2)
lines(x,y2,type="l",lwd=2,col="blue")
y3=dnorm(x,mean=0,sd=0.5)
lines(x,y3,type="l",lwd=2,col="green")
x=seq(70,130,length=200)
y=dnorm(x,mean=100,sd=10)
plot(x,y,tpye="l",lwd=2,col="red")
plot(x,y,type="l",lwd=2,col="red")
x=seq(70,90,length=100)
y=dnorm(x,mean=100,sd=10)
polygon(c(70,x,90),c(0,y,0),col="gray")
pnorm(90,mean=100,sd=10)
x=seq(70,130,length=200)
y=dnorm(x,mean=100,sd=10)
plot(x,y,type="l",lwd=2,col="red")
x=seq(90,110,length=200)
y=dnorm(x,mean=100,sd=10)
polygon(c(90,x,110),c(0,y,0),col="gray")
pnorm(110,mean=100,sd=10)-pnorm(90,mean=100,sd=10)
treat<-c("control","fertilizer","water","exclosure")
mean<-c(5,9,8,5.5)
sd<-c(.25,.3,.2,.35)
b<-data.frame(treat,mean,sd)
barplot(height=b$mean,names=b$treat,xlab="Treatments",ylab="Plant Biomass (g)",col="gray",ylim=c(0,10))
box()
xl<-c(1,2,3,4,5,6,7,8)
yl<-c(2,4,5,7,8,7,9,10)
y2<-c(1,3,2,4,6,5,7,7)
plot(xl,yl,xlab = "Arrival Order",ylab = "Hat Size (cm)",ylim = c(0,10),xlim = c(0,8),main="Hat Size by Order",sub = "data from ScI",asp=3/4,pch=2,col="blue",type="b",1ty=3)
plot(xl,yl,xlab="Arrival Order",ylab="Hat Size (cm)",ylim=c(0,10),xlim=c(0,8),main="Hat Size by Order",sub = "data from ScI",asp=3/4,pch=2,col="blue",type="b",1ty=3)
x1<-c(1,2,3,4,5,6,7,8)
y1<-c(2,4,5,7,8,7,9,10)
y2<-c(1,3,2,4,6,5,7,7)
plot(x1,y1,xlab="Arrival Order",ylab="Hat Size (cm)",ylim=c(0,10),xlim=c(0,8),main="Hat Size by Order",sub = "data from ScI",asp=3/4,pch=2,col="blue",type="b",1ty=3)
plot(x1,y1,xlab="Arrival Order",ylab="Hat Size (cm)",ylim=c(0,10),xlim=c(0,8),main="Hat Size by Order",sub = "data from ScI",asp=3/4,pch=2,col="blue",type="b",lty=3)
> dataset = read.csv("Data.csv")
> dataset$Age=ifelse(is.na(dataset$Age),ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),dataset$Age)
> dataset$Salary=ifelse(is.na(dataset$Salary),ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),dataset$Salary)
> dataset$Country= dataset$Country=factor(dataset$Country, levels = c('France','Spain','Germany'), labels = c(1,2,3))
> dataset$Purchased= dataset$Purchased=factor(dataset$Purchased, levels = c('No','Yes'), labels = c('0','1'))
> library(caTools)
> set.seed(123)
> Split = sample.split(dataset$Purchased, SplitRatio = 0.8)
> test_set = subset(dataset, Split == FALSE)
> training_set = subset(dataset, Split == TRUE)
install.packages("diplyr")
help(rtools)
install.packages("rtools")
library(tools, lib.loc = "C:/Program Files/R/R-3.6.3/library")
help("norm")
mean=25
sd=1
x=seq(-4,4,length=9)*sd+mean
norm(x)
help(curve)
curve(x,from=-4,to=4,n=9,type = "l")
curve
curve(dnorm(x),xlim=c(-4,4))
x=25
curve(dnorm(x),xlim=c(-4,4))
curve(dnorm(x,mean=25,sd=1,log=FALSE))
x=seq(-10,10, by=1)
curve(dnorm(x,mean=25,sd=1))
x=dnorm(x,mean=25,sd = 1)
y=dnorm(x,mean=25,sd = 1)
x=seq(-10,10, by=1)
plot(x,y)
curve(dnorm(y))
curve(dnorm(x, mean = 25, sd = 1))
curve(dnorm(x, mean = 25, sd = 1))
x=seq(-10,10, by = 1)
curve(dnorm(x,mean = 25, sd = 1)
V1=c(1:25,2)
v1
V1=c(1:25)
v2=c(2:26)
v1+v2
v3=v1+v2
v1=c(1:25)
vec1=c(1:20)
vec2=c(30:50)
vec3=vec1+vec2
vec3
vec4=vec1/vec2
vec5=vec1*vec3
x = rnorm(5)
x
for (i in x) {
print(i)
}
for (j in 1:5) {
print(x[j])
}
#this is a conventional loop
-----------2nd part-----------
#Here we will compare vectorized vs devectorized operations
N = 100
rnorm(N)
q=rnorm(N)
s=rnorm(N)
#----------------------Vectorized Operation
c = q*s
#----------------------De Vectorized operation
#Allocate memory. We created a 100 spaces that will be filled by our operation
d=replicate(NA,N)
d=rep(NA,N)
for (i in 1:N) {
d[i]=q[i]*s[i]
}
N=500
a=rnorm(N)
b=rnorm(N)
Crapshoot=a*b
Crapshoot1=Crapshoot*a*b
Crapshoot2=Crapshoot1/rnorm(N)
setwd("C:/Users/15033/OneDrive/Documents/R Notebook codes/R_Udemy/r_advanced/Section_3")
util = read.csv("P3-Machine-Utilization.csv")
head(util, 12)
str(util)
summary(util)
#Derive percent utilization:
util$Utilization = 1 - util$Percent.Idle
head(util,12)
as.POSIXct(util, format = "%d/%m%Y %H:%M")
as.POSIXct(util, format = "%d/%m/%Y %H:%M")
as.POSIXct(util$Timestamp, format = "%d/%m/%Y %H:%M")
Util$PosixTime = s.POSIXct(util$Timestamp, format = "%d/%m/%Y %H:%M")
Util$PosixTime = as.POSIXct(util$Timestamp, format = "%d/%m/%Y %H:%M")
util$PosixTime = as.POSIXct(util$Timestamp, format = "%d/%m/%Y %H:%M")
head(util)
head(util,12)
setwd("~/R Notebook codes/Tidyverse/dplyapplied/MachineUtilization")
data = read.csv(choose.files())
library(tidyverse)
library(lubridate)
library(skimr)
skim(data)
?skimr
head(data)
bottom(data)
tail(data)
str(data)
unique(data$Machine)
dataPrep = data %>%
mutate(Timestamp = mdy_hm(Timestamp))
dataPrep = mdy_hm(data$Timestamp)
head(dataPrep)
dataPrep = dmy_hm(data$Timestamp)
head(dataPrep,75)
dataPrep %>%
select(Timestamp, Machine)
str(dataPrep)
rm(dataPrep)
dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp))
dataPrep
dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle <= .90)
dataPrep
dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10)
dataPrep
dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10) %>%
drop_na()
head(dataPrep)
unique(dataPrep$Machine)
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10) %>%
drop_na()
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10)
unkwnReport = data %>%
filter(Percent.Idle == "NA")
unkwnReport
rm(unkwnReport)
data = read.csv(choose.files(), na.strings = c(""))
skim(data) # Checking for missing values and character types
unkwnReport = data %>%
filter(Percent.Idle == "NA")
unkwnReport = data %>%
select(Percent.Idle)
head(unkwnReport)
unkwnReport = data %>%
select(Percent.Idle) %>%
filter(!complete.cases(Percent.Idle))
unkwnReport
unkwnReport = data %>%
select(Timestamp, Machine, Percent.Idle) %>%
filter(!complete.cases(Percent.Idle))
unkwnReport
unkwnReport = data %>%
select(Timestamp, Machine, Percent.Idle) %>%
filter(!complete.cases(Percent.Idle)) %>%
group_by(Machine)
unkwnReport = data %>%
select(Timestamp, Machine, Percent.Idle) %>%
filter(!complete.cases(Percent.Idle)) %>%
group_by(Machine) %>%
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10)
unkwnReport = data %>%
select(Timestamp, Machine, Percent.Idle) %>%
filter(!complete.cases(Percent.Idle)) %>%
group_by(Machine) %>%
summarise()
unkwnReport
?summarise
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10)
idleFlage
# Machines with Unkown times:
unkwnReport = data %>%
select(Timestamp, Machine, Percent.Idle) %>%
filter(!complete.cases(Percent.Idle)) %>%
group_by(Machine) %>%
summarise(hours = count())
# Machines with Unkown times:
unkwnReport = data %>%
select(Timestamp, Machine, Percent.Idle) %>%
filter(!complete.cases(Percent.Idle)) %>%
group_by(Machine) %>%
summarise(hours = count(Timestamp))
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10) %>%
summarise()
idleFlage
idleFlage
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10)
idleFlage
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10) %>%
group_by(Machine) %>%
summarise(n = n())
idleFlage
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10) %>%
group_by(Machine) %>%
summarise("Hours Unkown" = n())
idleFlage
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10) %>%
group_by(Machine) %>%
summarise("Hours Unknown" = n())
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10) %>%
group_by(Machine) %>%
summarise("Instances under 90%" = n())
# Machines with Unkown times:
unkwnReport = data %>%
select(Timestamp, Machine, Percent.Idle) %>%
filter(!complete.cases(Percent.Idle)) %>%
group_by(Machine) %>%
summarise(instances = n())
unkwnReport
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10) %>%
group_by(Machine) %>%
summarise("Instances under 90%" = n())
summarise(unkwnReport, n = n())
summarise(unkwnReport, n = n(), group_by(Machine))
summarise(unkwnReport, n = n(), group_by(unkwnReport$Machine))
summarise(unkwnReport, dplyr::group_by(unknwnReport$Machine), n = n())
sumarise()
?summarise()
summarise(unknwnReport)
summarise(unkwnReport)
summarise(unkwnReport$Machine)
# Machines with Unkown times:
unkwnReport = data %>%
select(Timestamp, Machine, Percent.Idle) %>%
filter(!complete.cases(Percent.Idle)) %>%
group_by(Machine) %>%
idleFlage = dataPrep = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10) %>%
group_by(Machine) %>%
summarise("Instances under 90%" = n())
# Machines with Unkown times:
unkwnReport = data %>%
select(Timestamp, Machine, Percent.Idle) %>%
filter(!complete.cases(Percent.Idle)) %>%
group_by(Machine) %>%
summarise(n = n())
unkwnReport
# Machines with Unkown times:
unkwnReport = data %>%
select(Timestamp, Machine, Percent.Idle) %>%
filter(!complete.cases(Percent.Idle)) %>%
group_by(Machine) %>%
summarise('Hours Unkown' = n())
unkwnReport
idleFlage = data %>%
mutate(Timestamp = dmy_hm(Timestamp)) %>%
filter(Percent.Idle >= .10) %>%
group_by(Machine) %>%
summarise("Instances under 90%" = n())
rm(dataPrep)
data %>%
select(Timestamp, Machine, Percent.Idle) %>%
filter(!complete.cases(Percent.Idle))
colnames(data)
data %>%
select(Timestamp, Machine, Percent.Idle) %>%
drop_na()
data_clean = data %>%
select(Timestamp, Machine, Percent.Idle) %>%
drop_na()
plot_machines = ggplot(data_clean, aes(x = Machine, y = Percent.Idle))
plot_machines + geom_point()
plot_machines = ggplot(data_clean, aes(x = Timestamp, y = Percent.Idle ))
plot_machines + geom_point()
plot_machines = ggplot(data_clean, aes(x = Timestamp, y = Percent.Idle ),
color = Machine)
plot_machines + geom_point()
plot_machines = ggplot(data_clean, aes(x = Timestamp, y = Percent.Idle, color = Machine ))
plot_machines + geom_point()
library(scales)
plot_machines +
geom_point() +
scale_x_continuous(guide = 45)
plot_machines +
geom_point() +
scale_x_continuous()
plot_machines +
geom_point()
plot_machines +
geom_bins()
plot_machines +
geom_bar()
plot_machines +
geom_point()
plot_machines +
geom_point() +
lab(title = "PErcent Idle All Machines")
plot_machines +
geom_point() +
labs(title = "PErcent Idle All Machines")
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = Month,
ylab = Percent Idle)
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle")
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle") +
scale_x_binned()
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle") +
scale_x_datetime()
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle") +
scale_x_date()
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle") +
scale_x_discrete(breaks_pretty())
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle") +
scale_x_discrete(breaks_pretty(Percent.Idle))
plot_machines +
geom_point(guide_axis(angle = 45)) +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle")
geom_point(aes(guide_axis(angle = 45)) +
ylab = "Percent Idle")
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle")
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle")
plot_machines +
geom_point(aes(labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle")))
plot_machines +
geom_point()
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle"))
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle")
plot_machines +
geom_point() +
labs(title = "Percent Idle All Machines",
xlab = "Month",
ylab = "Percent Idle")
knitr::kable(unkwnReport)
knitr::kable(unkwnReport, align = "c")
library(bslib)
