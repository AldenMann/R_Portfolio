install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
install.packages(c("ade4", "blob", "bslib", "cachem", "cpp11", "curl", "data.table", "digest", "DT", "hms", "htmltools", "htmlwidgets", "httpuv", "isoband", "knitr", "later", "lifecycle", "matrixStats", "mime", "openssl", "pillar", "R.utils", "R6", "Rcpp", "RCurl", "readr", "reticulate", "rJava", "rmarkdown", "RSQLite", "shiny", "stringi", "tibble", "tidyr", "tinytex", "utf8", "waldo", "xfun", "XML"))
#Libraries
#Libraries
library(tidyverse)
#Libraries
#Libraries
library(tidyverse)
library(lubridate)
data = read.csv(choose.files(), na.strings = c("")) # Opens file explore to choose csv file
data %>%
filter(!complete.cases(data))
data %>%
filter(!complete.cases(data))
data_tidy = data %>%
mutate(QUOTE.DATE = mdy(QUOTE.DATE)) %>%
mutate(PO.DATE = mdy(PO.DATE)) %>%
mutate(INVOICE.DATE = mdy(INVOICE.DATE)) %>%
mutate(CONVERTED = PO.DATE - QUOTE.DATE) %>%
mutate(CLOSED = INVOICE.DATE - PO.DATE) %>%
select(-CONVERSION.RATE, -CLOSED.RATE) %>%
drop_na()
data_tidy
data_tidy = data %>%
mutate(QUOTE.DATE = mdy(QUOTE.DATE)) %>%
mutate(PO.DATE = mdy(PO.DATE)) %>%
mutate(INVOICE.DATE = mdy(INVOICE.DATE)) %>%
mutate(CONVERTED = PO.DATE - QUOTE.DATE) %>%
mutate(CLOSED = INVOICE.DATE - PO.DATE) %>%
select(-CONVERSION.RATE, -CLOSED.RATE)
data_tidy
data_tidy = data %>%
mutate(QUOTE.DATE = mdy(QUOTE.DATE)) %>%
mutate(PO.DATE = mdy(PO.DATE)) %>%
mutate(INVOICE.DATE = mdy(INVOICE.DATE)) %>%
mutate(CONVERTED = PO.DATE - QUOTE.DATE) %>%
mutate(CLOSED = INVOICE.DATE - PO.DATE) %>%
select(-CONVERSION.RATE, -CLOSED.RATE) %>%
drop_na()
avg_converted = signif(mean(data_tidy$CONVERTED), 3)
avg_closed = signif(mean(data_tidy$CLOSED), 3)
#Libraries
library(tidyverse)
library(lubridate)
data = read.csv(choose.files(), na.strings = c("")) # Opens file explore to choose csv file
data_tidy = data %>%
mutate(QUOTE.DATE = mdy(QUOTE.DATE)) %>%
mutate(PO.DATE = mdy(PO.DATE)) %>%
mutate(INVOICE.DATE = mdy(INVOICE.DATE)) %>%
mutate(CONVERTED = PO.DATE - QUOTE.DATE) %>%
mutate(CLOSED = INVOICE.DATE - PO.DATE) %>%
select(-CONVERSION.RATE, -CLOSED.RATE) %>%
drop_na()
avg_converted = signif(mean(data_tidy$CONVERTED), 3)
avg_closed = signif(mean(data_tidy$CLOSED), 3)
avg_closed
avg_converted
week_RR100 = data %>%
select(Cat.No., QTY, ID, CLIENT, COUNTRY, QUOTE.DATE) %>%
filter(QUOTE.DATE >= as.Date("2021-09-20")) %>%
filter(Cat.No.== "1130-100")
#Libraries
library(tidyverse)
library(lubridate)
data = read.csv(choose.files(), na.strings = c("")) # Opens file explore to choose csv file
data = read.csv(choose.files(), na.strings = c("")) # Opens file explore to choose csv file
data %>%
filter(!complete.cases(data))
data_tidy = data %>%
mutate(QUOTE.DATE = mdy(QUOTE.DATE)) %>%
mutate(PO.DATE = mdy(PO.DATE)) %>%
mutate(INVOICE.DATE = mdy(INVOICE.DATE)) %>%
mutate(CONVERTED = PO.DATE - QUOTE.DATE) %>%
mutate(CLOSED = INVOICE.DATE - PO.DATE) %>%
select(-CONVERSION.RATE, -CLOSED.RATE)
head(data_tidy)
avg_converted = signif(mean(data_tidy$CONVERTED), 3)
avg_closed = signif(mean(data_tidy$CLOSED), 3)
avg_closed
stats_weekly = data_tidy %>%
select(CONVERTED,CLOSED) %>%
drop_na()
head(stats_weekly)
rm(stats_weekly)
converted_stats = data_tidy %>%
select(CONVERTED) %>%
drop_na()
converted_stats
converted_stats = data_tidy %>%
select(CONVERTED) %>%
drop_na %>%
summarise(Mean = mean(CONVERTED), Count = length(CONVERTED))
converted_stats
converted_stats = data_tidy %>%
select(CONVERTED) %>%
drop_na %>%
summarise(Mean = signif(mean(CONVERTED),3), Count = length(CONVERTED))
converted_stats
converted_stats = data_tidy %>%
select(CLOSED) %>%
drop_na %>%
summarise(Mean = signif(mean(CLOSED),3), Count = length(CLOSED))
closed_stats = data_tidy %>%
select(CLOSED) %>%
drop_na %>%
summarise(Mean = signif(mean(CLOSED),3), Count = length(CLOSED))
converted_stats = data_tidy %>%
select(CONVERTED) %>%
drop_na %>%
summarise(Mean = signif(mean(CONVERTED),3), Count = length(CONVERTED))
converted_stats
closed_stats
data_tidy %>%
drop_na() %>%
select(Cat.No.:QUOTE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(QUOTE.DATE >= today("GMT")-days(7)) %>%
length()
# Quotes in the Last 30 days
data_tidy %>%
drop_na() %>%
select(Cat.No.:PO.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(PO.DATE >= today("GMT")-days(7))
# Quotes in the Last 30 days
data_tidy %>%
drop_na() %>%
select(Cat.No.:PO.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(PO.DATE >= today("GMT")-days(30))
# Quotes in the Last 30 days
data_tidy %>%
drop_na() %>%
select(Cat.No.:PO.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(PO.DATE >= today("GMT")-days(30)) %>%
length()
# Quotes in the Last 30 days
data_tidy %>%
drop_na() %>%
select(Cat.No.:PO.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(PO.DATE >= today("GMT")-days(30))
# Quotes made in the Last 7 days
data_tidy %>%
drop_na() %>%
select(Cat.No.:QUOTE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(QUOTE.DATE >= today("GMT")-days(7))
# Quotes made in the Last 7 days
data_tidy %>%
drop_na() %>%
select(Cat.No.:QUOTE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(QUOTE.DATE >= today("GMT")-days(7)) %>%
length()
# Quotes made in the Last 7 days
data_tidy %>%
drop_na() %>%
select(Cat.No.:QUOTE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(QUOTE.DATE >= today("GMT")-days(7)) %>%
count()
# Quotes in the Last 30 days
data_tidy %>%
drop_na() %>%
select(Cat.No.:PO.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(PO.DATE >= today("GMT")-days(30)) %>%
count()
# Quotes in the Last 30 days
data_tidy %>%
drop_na() %>%
select(Cat.No.:PO.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(PO.DATE >= today("GMT")-days(7)) %>%
count()
# Quotes made in the Last 7 days
data_tidy %>%
drop_na() %>%
select(Cat.No.:QUOTE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(QUOTE.DATE >= today("GMT")-days(30)) %>%
count()
# Quotes made in the Last 7 days
data_tidy %>%
drop_na() %>%
select(Cat.No.:QUOTE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(QUOTE.DATE >= today("GMT")-days(30))
# Quotes made in the Last 7 days
data_tidy %>%
drop_na() %>%
select(QUOTE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(QUOTE.DATE >= today("GMT")-days(7)) %>%
count()
# PO's in the Last 7 days
data_tidy %>%
drop_na() %>%
select(PO.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(PO.DATE >= today("GMT")-days(7)) %>%
count()
quotes_week = data_tidy %>%
drop_na() %>%
select(QUOTE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(QUOTE.DATE >= today("GMT")-days(7)) %>%
count()
po_week = data_tidy %>%
drop_na() %>%
select(PO.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(PO.DATE >= today("GMT")-days(7)) %>%
count()
close_week = data_tidy %>%
drop_na() %>%
select(CLOSED) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(CLOSED >= today("GMT")-days(7)) %>%
count()
close_week
# PO's in the Last 7 days
close_week = data_tidy %>%
drop_na() %>%
select(CLOSED) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(CLOSED >= today("GMT")-days(30)) %>%
count()
close_week = data_tidy %>%
drop_na() %>%
select(CLOSED) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(CLOSED >= today("GMT")-days(30)) %>%
count()
str(data_tidy)
# PO's in the Last 7 days
close_week = data_tidy %>%
drop_na() %>%
select(INVOICE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(INVOICE.DATE >= today("GMT")-days(30)) %>%
count()
close_week
close_week = data_tidy %>%
drop_na() %>%
select(INVOICE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(INVOICE.DATE >= today("GMT")-days(7)) %>%
count()
close_week
data_tidy %>%
drop_na() %>%
select(INVOICE.DATE)
data_tidy %>%
drop_na() %>%
select(INVOICE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(INVOICE.DATE >= today("GMT")-days(7))
# Quotes made in the Last 30 days
quotes_month = data_tidy %>%
drop_na() %>%
select(QUOTE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(QUOTE.DATE >= today("GMT")-days(30)) %>%
count()
# PO's in the Last 30 days -- PO's received this week
po_month = data_tidy %>%
drop_na() %>%
select(PO.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(PO.DATE >= today("GMT")-days(30)) %>%
count()
# PO's closed in the Last 30 days -- Shipped this week
close_month = data_tidy %>%
drop_na() %>%
select(INVOICE.DATE) %>% #Might need to change range, should inlcude quote#, Client, Cat.No., and qty
filter(INVOICE.DATE >= today("GMT")-days(30)) %>%
count()
open_po = po_month - close_month
open_po
po_month
close_month
lib_paths_Set = .libPaths(choose.dir())
.libPaths()
lib_paths_Set
library(tidyverse)
library(skimr)
setwd("~/R Notebook codes/Tidyverse/dplyapplied/finacial analyst")
data = read.csv(choose.files(), na.strings = c(""))
data = read.csv(choose.files(), na.strings = c(""))
data2.0 = data %>%
mutate(Expenses = gsub("Dollars", "", Expenses), # Removed "Dollars".
Expenses = gsub(",", "", Expenses), # Removed commas and the space.
Expenses = str_squish(Expenses),
Expenses = as.numeric(Expenses), # Changed to integer (hopefully. Will need to check later.).
Revenue = gsub("\\$", "", Revenue), # used esscape sequence '\\' to remove '$'.
Revenue = gsub(",", "", Revenue),# Removed commas and the space.
Revenue = as.numeric(Revenue), # Makes Revenue MATHEMATICAL MAN!
Profit = as.numeric(Profit), # Makes Profits MATHEMAICAL MAN!
Growth = gsub("%", "", Growth), # Removed % symbol from values.
Growth = as.numeric(Growth)) %>% # Makes Growth MATHEMATICAL MAN!
mutate(State = ifelse(City == 'San Francisco', 'CA', State), # NA value in State is CA
State = ifelse(City == 'New York', 'NY', State), # NA value in State is NY
Industry = ifelse(Name == 'Techline', 'IT Services', Industry), #NA value in Industry is IT Services
Industry = ifelse(Name == 'Cityace', 'Retail', Industry), #NA value in Industry is Retail
Expenses = ifelse(is.na(Expenses), Revenue-Profit, Expenses), # Calculated what Expenses are from existing columns.
Inception = ifelse(Name == 'Lathotline', '2011', Inception)) %>%  # Made the inception date 2011 for the NA value.
drop_na() #drops NA's fo
plot = ggplot(data = data2.0) # Assign data to plot to a veriable. I just like that.
plot + geom_point(aes(x = Revenue, y = Expenses,
size = Profit,
color = Industry))  +
labs(title = "Revenue by Expense Growth",
subtitle = "By Insdusry",
caption = "Profit is inverseley related to Expenses.")
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!")
?scale::
?scales
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!")+
scale_x_continuous(NULL,
labels = scales::label_dollar())
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!") +
scale_x_continuous(NULL,
labels = scales::label_dollar()) +
scale_y_continuous(NULL,
labels = scales::label_dollar())
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!") +
scale_x_continuous(NULL,
breaks = n = 10,
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!") +
scale_x_continuous(NULL,
breaks = breaks_extended(5),
labels = scales::label_dollar()) +
scale_y_continuous(NULL,
labels = scales::label_dollar())
library(scales)
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!") +
scale_x_continuous(NULL,
breaks = breaks_extended(5),
labels = scales::label_dollar()) +
scale_y_continuous(NULL,
labels = scales::label_dollar())
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!") +
scale_x_continuous(NULL,
breaks = breaks_extended(10),
labels = scales::label_dollar()) +
scale_y_continuous(NULL,
labels = scales::label_dollar())
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!") +
scale_x_continuous(NULL,
breaks = breaks_extended(5),
labels = scales::label_dollar()) +
scale_y_continuous(NULL,
labels = scales::label_dollar())
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!") +
scale_x_continuous(NULL,
labels = scales::label_dollar()) +
scale_y_continuous(NULL,
labels = scales::label_dollar())
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!") +
scale_x_continuous(NULL,
labels = scales::label_dollar()) +
scale_y_continuous(NULL,
breaks = breaks_extended(n = 5),
labels = scales::label_dollar())
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!") +
scale_x_continuous(NULL,
labels = scales::label_dollar()) +
scale_y_continuous(NULL,
breaks = breaks_extended(n = 7),
labels = scales::label_dollar())
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
geom_smooth(aes(x = Expenses, y = Revenue,
color = Industry),
fill = NA, size  = 1.2) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!") +
scale_x_continuous(NULL,
breaks = breaks_extended(n = 7),
labels = scales::label_dollar()) +
scale_y_continuous(NULL,
breaks = breaks_extended(n = 7),
labels = scales::label_dollar())
plot + geom_boxplot(aes(x = Industry, y = Growth,
color = Industry)) +
scale_y_continuous(NULL,
labels = label_dollar())
plot + geom_boxplot(aes(x = Industry, y = Growth,
color = Industry))
plot + geom_boxplot(aes(x = Industry, y = Growth,
color = Industry)) +
scale_y_continuous(NULL,
labels = label_percent())
plot + geom_boxplot(aes(x = Industry, y = Growth,
color = Industry)) +
labs(title = "Growth by Industry",
y = "Growth (%)")
plot + geom_point(aes(x = Revenue, y = Expenses,
size = Profit,
color = Industry))  +
labs(title = "Revenue by Expense Growth",
subtitle = "By Insdusry",
caption = "Profit is inversely related to Expenses.")
plot + geom_point(aes(x = Revenue, y = Expenses,
size = Profit,
color = Industry))  +
labs(title = "Revenue by Expense Growth",
subtitle = "By Insdusry",
caption = "Profit is inversely related to Expenses.") +
scale_x_continuous(NULL,
labels = label_dollar())
plot + geom_point(aes(x = Revenue, y = Expenses,
size = Profit,
color = Industry))  +
labs(title = "Revenue by Expense Growth",
subtitle = "By Insdusry",
caption = "Profit is inversely related to Expenses.") +
scale_x_continuous(NULL,
labels = label_dollar()) +
scale_y_continuous(NULL,
labels = label_dollar())
```{r, echo=FALSE}
plot + geom_point(aes(x = Expenses, y = Revenue,
color = Industry)) +
labs(title = "Relationship of Revenue vs Expenses",
caption = "Government Services seems pretty steady!") +
scale_x_continuous(NULL,
breaks = breaks_extended(n = 7),
labels = scales::label_dollar()) +
scale_y_continuous(NULL,
breaks = breaks_extended(n = 7),
labels = scales::label_dollar())
plot + geom_boxplot(aes(x = Industry, y = Growth,
color = Industry)) +
labs(title = "Growth by Industry",
y = "Growth (%)")
plot + geom_boxplot(aes(x = Industry, y = Growth,
color = Industry)) +
labs(title = "Growth by Industry",
y = "Growth (%)") +
scale_x_discrete(NULL,
guide = guide_axis(angle = 45))
bslib::bootswatch_themes()
library(bslib)
bslib::bootswatch_themes()
---
title: "Financial Report"
author: "Robert Manni"
date: "10/9/2021"
output:
html_document:
theme:
bootswatch: solar
df_print: paged
word_document: default
bslib::bootswatch_themes()
